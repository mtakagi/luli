=========
概要
=========

luli とは
=========

luli は Lua 言語で記述されたソースコードの静的解析を行うコマンドラインツールです。
ソースコードのコーディングスタイルを検査し、さらに解析してプログラミング上のアンチパターンを検出します。

特徴
====

コーディングスタイルの検査
--------------------------

ソースコードが :ref:`コーディングスタイル <CodingStyle>` に従っているかどうかを検査します (現在 Lua には正式なコーディングスタイルがないため、既存のコーディングスタイルを参考にして luli 用のコーディングスタイルを用意しました) 。設定ファイルをプロジェクトで共有することで、開発者の多いプロジェクトでもコーディングスタイルを統一しやすくなります。

アンチパターンの検出
--------------------------

ソースコードを解析し、プログラムの保守性や信頼性の観点から望ましくないコードを検出します。例えば、宣言されているにも関わらずどこからも参照されていないローカル変数 (関数) や、グローバルなスコープに定義されている可能性のある変数 (関数) を検出します。その他の検出できるパターンは :ref:`機能一覧 <Analysis>` を参照してください。

モジュールの依存関係の検査
--------------------------

依存するモジュール (ソースコード中で ``require`` されているファイル) の内容を解析し、外部モジュールで定義されているグローバル変数やモジュールの循環参照を検出します。

テキストエディタとの連携
------------------------

luli では、テキストエディタから luli を実行するプラグインを用意しています。これらのプラグインを導入すれば、ソースコードを変更してすぐに luli による検査結果をテキストエディタ上で確認できます。同時に文法エラーも検出できるため、プログラムの実行前にささいなミスを発見するのに役立ちます。

動作環境
========

- Mac OS X
- Linux

対応する Lua のバージョン
===========================

luli は Lua のバージョン 5.1 と 5.2 に対応しています。 バージョンを指定するには ``-lua-version`` オプションに ``5.1`` または ``5.2`` を指定します。デフォルトの設定は ``5.2`` です。

指定するバージョンによって次の挙動が異なります。

- 構文解析: 5.2 を指定した場合、 goto 文とラベル文を解析できます。

- 標準ライブラリ: 5.1 と 5.2 で利用できるライブラリが異なります。

機能一覧
========

コーディングスタイルの検査
--------------------------

- インデントの検査

 - タブとスペースの混在を検出する
 - 不適切な深さのインデントを検出する

- スペースの検査

 - 演算子の前後のスペースの過不足を検出する
 - 括弧（丸括弧、角括弧、波括弧）の前後のスペースの過不足を検出する
 - コンマ、ドット、コロンの前後のスペースの過不足を検出する
 - 行末の不要なスペースを検出する

- 改行の検査

 - ファイル末尾の空行を検出する

- コメントの検査

 - "-- " （ハイフン 2 つ + スペース 1 つ）で始まっていないコメントを検出する
 - 直前に 2 つ以上のスペースがないインラインコメントを検出する

- 行と文の検査

 - 一行の文字数が 79 文字以上である行を検出する（基準となる文字数は変更可）
 - 一行に複数の文が記述されている行を検出する
 - 終端にセミコロンのある文を検出する

- リテラルの検査

 - ダブルクオートで囲まれた文字列を検出する

.. _Analysis:

ソースコードの解析
------------------

- 変数の解析

 - 未使用のローカル変数を検出する
 - 未代入の変数を検出する（可能であればスペルミスを指摘する）
 - 既存の変数を隠蔽しているローカル変数を検出する
 - 複数回定義されているローカル変数を検出する（TODO: わかりやすく）
 - 初期値に匿名関数を代入しているローカル変数定義文を検出する
 - グローバル変数として定義されている変数を検出する
 - グローバル変数への再代入を検出する
 - グローバル関数として定義されている関数を検出する
 - 大文字を含む（ snake_case でない）識別子を検出する

- 式の解析

 - 空の文字列を連結している式を検出する（文字列へのキャストを目的とした文字列連結演算子の使用）
 - テーブルのインデックスに 0 （数値リテラル）を指定している式を検出する

- モジュールの解析

 - モジュールの循環参照を検出する
