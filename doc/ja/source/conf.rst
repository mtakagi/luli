.. _Configuration:

============
設定ファイル
============

:ref:`コマンドラインオプション <Options>` と同等の内容をファイルに記述できます。設定ファイルを読み込むには、次のいずれかの方法があります。

- ``-config`` オプションの引数に設定ファイル名を指定する。

- 設定ファイル名を ``Lulifile`` とし、ソースコードのあるトップレベルのディレクトリに置く。
  
luli は実行時に ``Lulifile`` を検索して読み込みます。通常は ``Lulifile`` を利用するとよいでしょう。詳しくは後述の :ref:`Lulifile` の節を参照してください。

設定ファイルが読み込まれると、その設定ファイルのあるディレクトリが :ref:`モジュール <LoadingModules>` のロードパスに追加されます。


設定ファイルのフォーマット
==========================

設定ファイルは INI ファイルのフォーマットで記述します。 ``[luli]`` セクション以下に、コマンドラインオプションと同名のパラメータのリストを記述します。

例::

  [luli]
  ; コメント
  lua-version = 5.2
  max-line-length = 160
 

設定ファイルの雛形を生成する
============================

``-init`` オプションを指定すると、設定ファイルの雛形を生成できます。デフォルトのファイル名は ``Lulifile`` です。


.. _Lulifile:

Lulifile
========

``Lulifile`` は、 luli の実行時に自動的に読み込まれる設定ファイルです。 luli は実行されたディレクトリに ``Lulifile`` の有無を調べ、 ``Lulifile`` がなければディレクトリを上にたどって探します。プロジェクトのコーディングスタイルを統一したい場合は、ソースコードのトップレベルのディレクトリに ``Lulifile`` を置くとよいでしょう。

ただし、 ``Lulifile`` と ``-config`` オプションは併用できません。 ``-config`` オプションが指定されていれば luli はそちらの設定ファイルを優先し、 luli を実行したディレクトリに ``Lulifile`` があっても読み込みません。 ``Lulifile`` の置かれたプロジェクトの設定の一部を個人的な設定ファイルで上書きするといった使い方はできません。
